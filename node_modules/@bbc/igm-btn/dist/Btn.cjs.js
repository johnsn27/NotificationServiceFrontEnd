'use strict';

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var React = _interopDefault(require('react'));
var PropTypes = _interopDefault(require('prop-types'));

function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

var classnames = createCommonjsModule(function (module) {
/*!
  Copyright (c) 2016 Jed Watson.
  Licensed under the MIT License (MIT), see
  http://jedwatson.github.io/classnames
*/
/* global define */

(function () {

	var hasOwn = {}.hasOwnProperty;

	function classNames () {
		var classes = [];

		for (var i = 0; i < arguments.length; i++) {
			var arg = arguments[i];
			if (!arg) continue;

			var argType = typeof arg;

			if (argType === 'string' || argType === 'number') {
				classes.push(arg);
			} else if (Array.isArray(arg)) {
				classes.push(classNames.apply(null, arg));
			} else if (argType === 'object') {
				for (var key in arg) {
					if (hasOwn.call(arg, key) && arg[key]) {
						classes.push(key);
					}
				}
			}
		}

		return classes.join(' ');
	}

	if ('object' !== 'undefined' && module.exports) {
		module.exports = classNames;
	} else if (typeof undefined === 'function' && typeof undefined.amd === 'object' && undefined.amd) {
		// register as 'classnames', consistent with npm package name
		undefined('classnames', [], function () {
			return classNames;
		});
	} else {
		window.classNames = classNames;
	}
}());
});

var defineProperty = function (obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
};

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];

    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }

  return target;
};

var objectWithoutProperties = function (obj, keys) {
  var target = {};

  for (var i in obj) {
    if (keys.indexOf(i) >= 0) continue;
    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;
    target[i] = obj[i];
  }

  return target;
};

var Btn = function Btn(props) {
  var children = props.children,
      className = props.className,
      type = props.type,
      htmlType = props.htmlType,
      disabled = props.disabled,
      otherAttributes = objectWithoutProperties(props, ['children', 'className', 'type', 'htmlType', 'disabled']);


  var types = ['link', 'plainLink', 'primary', 'secondary', 'danger', 'info', 'publish'];

  var classes = classnames(defineProperty({
    'igm-btn': true
  }, 'igm-btn--' + type, types.indexOf(type) !== -1), className);

  if (children) {
    return React.createElement(
      'button',
      _extends({
        disabled: disabled,
        type: htmlType,
        className: classes
      }, otherAttributes),
      children
    );
  }
  return null;
};

Btn.propTypes = {
  /** Contents of the button */
  children: PropTypes.node,
  /** Custom class added to the button */
  className: PropTypes.string,
  /** The type determines the color of the button */
  type: PropTypes.oneOf(['primary', 'secondary', 'info', 'danger', 'publish', 'link', 'plainLink']),
  /** HTML type for the button */
  htmlType: PropTypes.oneOf(['button', 'submit', 'reset']),
  /** Disable the button */
  disabled: PropTypes.bool
};

Btn.defaultProps = {
  htmlType: 'button',
  disabled: false
};

module.exports = Btn;
//# sourceMappingURL=Btn.cjs.js.map
